#cloud-config
ssh_authorized_keys:
%{ for ssh_key in ssh_keys ~}
  - ${ssh_key}
%{ endfor ~}
hostname: ${hostname}
write_files:
  - path: /etc/rc.local
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash -x
      wait-for-docker

      # If no pre-existing running Rancher container then create new Rancher container
      if [ ! "$(docker ps -q -f name=rancher)" ]; then
          # If an exited Rancher container exists, delete it
          if [ "$(docker ps -aq -f status=exited -f name=rancher)" ]; then
              docker rm rancher
          fi
          export curlimage=appropriate/curl
          export jqimage=stedolan/jq

          for image in $curlimage $jqimage "rancher/rancher:${rancher_version}"; do
            until docker inspect $image > /dev/null 2>&1; do
              docker pull $image
              sleep 2
            done
          done

          docker run -d -e AUDIT_LEVEL=${audit_level} --privileged --name=rancher --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:${rancher_version} ${rancher_args}

          while true; do

            LOGINRESPONSE=$(docker run \
                --rm \
                --net=host \
                $curlimage \
                -s "https://127.0.0.1/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"admin"}' --insecure)
            LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)

            if [ ! -z "$LOGINTOKEN" ] && [ "$LOGINTOKEN" != "null" ]; then
                break
            else
                sleep 5
            fi
          done

          # Change password
          docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"currentPassword":"admin","newPassword":"${admin_password}"}' --insecure

          # Create API key
          APIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure)

          # Extract and store token
          APITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`

          # Configure server-url
          RANCHER_SERVER="https://$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')"
          docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X PUT --data-binary '{"name":"server-url","value":"'$RANCHER_SERVER'"}' --insecure

          # Check for available k8s versions if not specifically set
          if [ -z "${k8s_version}" ]; then
              while true; do
                  K8SVERSIONRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/k8s-version' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
                  K8SVERSION=$(echo $K8SVERSIONRESPONSE | docker run --rm -i $jqimage -r .value)
                  echo "K8SVERSION: "$K8SVERSION""

                  if [ "$K8SVERSION" != "" ]; then
                      break
                  else
                      sleep 5
                  fi
              done
          else
              K8SVERSION="${k8s_version}"
          fi

          # Create vSphere cloud credential
          docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cloudCredentials' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X POST --data-binary '{"name":"vsphere","vmwarevspherecredentialConfig":{"vcenter":"${vsphere_server}","vcenterPort":"443","username":"${vsphere_user}","password":"${vsphere_password}"}}' --insecure

          # Create cluster
          CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"cloudProvider":{"name":"vsphere","vsphereCloudProvider":{"virtualCenter":{"${vsphere_server}":{"user":"${vsphere_user}","password":"${vsphere_password}","port":443,"datacenters":"${vsphere_datacenter}"}},"workspace":{"server":"${vsphere_server}","folder":"/","default-datastore":"${vsphere_datastore}","datacenter":"${vsphere_datacenter}","resourcepool-path":"/${vsphere_resource_pool}"}}},"kubernetesVersion":"${k8s_version}","addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"canal"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"snapshot":false,"type":"etcdService","extraArgs":{"heartbeat-interval":500,"election-timeout":5000}}}},"name":"${cluster_name}"}' --insecure)
          # Extract clusterid to use for generating the docker run command
          CLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`

          # Generate registrationtoken
          docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure

      fi
